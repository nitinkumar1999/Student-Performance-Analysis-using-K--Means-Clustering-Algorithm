import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
student_data = pd.read_csv("student_clustering.csv")
student_data.head()
student_data.tail()
student_data.shape
student_data.columns
student_data.info()
student_data.describe()
student_data.isnull().sum()
student_data.iq.value_counts()
student_data.cgpa.value_counts()
plt.figure(figsize=(15,6))
sns.barplot(x = 'iq', y = 'cgpa', data = student_data)
plt.xticks(rotation = 0)
plt.show()
plt.figure(figsize=(15,6))
sns.countplot(x = 'iq', data = student_data)
plt.xticks(rotation = 0)
plt.show()
for i in student_data.columns:
sns.boxplot(x=student_data[i], orient = 'h', palette = 'Set2')
plt.show()
plt.figure(figsize=(15,6))
sns.scatterplot(x = 'cgpa', y = 'iq', data = student_data)
plt.xticks(rotation = 0)
plt.show()
from sklearn.cluster import KMeans
data = []
for i in range(1,11):
km = KMeans(n_clusters=i)
km.fit_predict(student_data)
data.append(km.inertia_)
data
plt.figure(figsize=(15,6))
plt.plot(range(1,11),data)
plt.grid()
plt.xticks(rotation = 0)
plt.show()
x = student_data.iloc[:,:].values
km = KMeans(n_clusters = 5)
y_means = km.fit_predict(x)
y_means
x[y_means==0]
x[y_means==0,0],x[y_means==0,1]
plt.scatter(x[y_means==0,0],x[y_means==0,1],color='red')
plt.scatter(x[y_means==1,0],x[y_means==1,1],color='green')
plt.scatter(x[y_means==2,0],x[y_means==2,1],color='blue')
plt.scatter(x[y_means==3,0],x[y_means==3,1],color='orange')
plt.scatter(x[y_means==4,0],x[y_means==4,1],color='yellow')
plt.xlabel('CPGA')
plt.ylabel('IQ')
X = student_data.drop(['cgpa'], axis = 1)
Y = student_data.cgpa
X.shape
Y.shape
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.33)
model = LinearRegression()
model.fit(X_train, y_train)
LinearRegression()
y_pred = model.predict(X_test)
print("Training Accuracy :", model.score(X_train, y_train))
print("Testing Accuracy :", model.score(X_test, y_test))
